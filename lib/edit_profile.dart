import 'dart:convert';import 'dart:io';import 'dart:math';import 'package:async/async.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:http/http.dart';import 'package:http/http.dart' as http;import 'package:image_picker/image_picker.dart';import 'package:job_seekar_app/account_setting.dart';import 'package:job_seekar_app/globle.dart';import 'package:path/path.dart';import 'package:progress_dialog/progress_dialog.dart';import 'package:shared_preferences/shared_preferences.dart';import 'constants.dart';import 'custom_page_route.dart';class EditProfile extends StatefulWidget {  @override  _EditProfilePageState createState() => _EditProfilePageState();}class _EditProfilePageState extends State<EditProfile> {  bool showPassword = false;  final TextEditingController fullNameController = new TextEditingController();  final TextEditingController usernameController = new TextEditingController();  final TextEditingController passwordController = new TextEditingController();  final TextEditingController bioController = new TextEditingController();  // final TextEditingController lastNameController = new TextEditingController();  @override  Widget build(BuildContext context) {    ProgressDialog pr = new ProgressDialog(context);    return Scaffold(      appBar: AppBar(        backgroundColor: Theme.of(context).scaffoldBackgroundColor,        elevation: 1,        leading: IconButton(          icon: Icon(            Icons.arrow_back,            color: Colors.green,          ),          onPressed: () {            if (Navigator.canPop(context)) {              Navigator.pop(context);            } else {              SystemNavigator.pop();            }          },        ),      ),      body: Container(        padding: EdgeInsets.only(left: 16, top: 25, right: 16),        child: GestureDetector(          onTap: () {            FocusScope.of(context).unfocus();          },          child: ListView(            children: [              Text(                "Edit Profile",                style: TextStyle(fontSize: 25, fontWeight: FontWeight.w500),              ),              SizedBox(                height: 15,              ),              Center(                child: Stack(                  children: [                    CircleAvatar(                      radius: 55,                      backgroundColor: Color(0xffFDCF09),                      child: _image != null                          ? ClipRRect(                              borderRadius: BorderRadius.circular(50),                              child: Image.file(                                new File(_image.path),                                width: 100,                                height: 100,                                fit: BoxFit.fitHeight,                              ),                            )                          : Container(                              decoration: new BoxDecoration(                                shape: BoxShape.circle,                                image: new DecorationImage(                                    fit: BoxFit.cover,                                    image: new NetworkImage(                                        imagePath(Globle.image))),                              ),                            ),                    ),                    // Positioned(                    //     bottom: 0,                    //     right: 0,                    //     child: GestureDetector(                    //         onTap: () {                    //           _showPicker(context);                    //         },                    //         child: Container(                    //           height: 40,                    //           width: 40,                    //           decoration: BoxDecoration(                    //             shape: BoxShape.circle,                    //             border: Border.all(                    //               width: 4,                    //               color:                    //                   Theme.of(context).scaffoldBackgroundColor,                    //             ),                    //             color: Colors.green,                    //           ),                    //           child: Icon(                    //             Icons.edit,                    //             color: Colors.white,                    //           ),                    //         ))),                  ],                ),              ),              Padding(                padding: const EdgeInsets.all(8.0),                child: Column(                  children: [                    GestureDetector(                        onTap: () {                          _showPicker(context);                        },                        child: Text("Edit Profile Photo",style: TextStyle(fontSize: 18,color: Colors.green),))                  ],                ),              ),              SizedBox(                height: 35,              ),              buildTextField(                  "Full Name", Globle.name, false, fullNameController),              buildTextField(                  "Username", Globle.username, false, usernameController),              Globle.user_type==1 ? buildTextField(                  "Password", Globle.password, true, passwordController):SizedBox(),              buildTextField(                  "Bio", Globle.bio, false, bioController),              SizedBox(                height: 35,              ),              Padding(                padding: const EdgeInsets.all(8.0),                child: Row(                  mainAxisAlignment: MainAxisAlignment.spaceBetween,                  children: [                    OutlineButton(                      padding: EdgeInsets.symmetric(horizontal: 50),                      shape: RoundedRectangleBorder(                          borderRadius: BorderRadius.circular(20)),                      onPressed: () {                        if (Navigator.canPop(context)) {                          Navigator.pop(context);                        } else {                          SystemNavigator.pop();                        }                      },                      child: Text("CANCEL",                          style: TextStyle(                              fontSize: 14,                              letterSpacing: 2.2,                              color: Colors.black)),                    ),                    RaisedButton(                      onPressed: () {                        setState(() {                          pr.show();                          if (_image != null) {                            upload(new File(_image.path)).then((value) {                              String imagePath =                                  json.decode(value.body)["imagePath"];                              if (value.statusCode == 200) {                                updateProfile(                                    context,                                    usernameController.text,                                    fullNameController.text,                                    passwordController.text,                                    imagePath,                                    Globle.id,                                    bioController.text,                                    pr);                              }                            }).catchError((error) => throw (error));                          } else {                            updateProfile(                                context,                                usernameController.text,                                fullNameController.text,                                passwordController.text,                                Globle.image,                                Globle.id,                                bioController.text,                                pr);                          }                        });                      },                      color: Colors.green,                      padding: EdgeInsets.symmetric(horizontal: 50),                      elevation: 2,                      shape: RoundedRectangleBorder(                          borderRadius: BorderRadius.circular(20)),                      child: Text(                        "SAVE",                        style: TextStyle(                            fontSize: 14,                            letterSpacing: 2.2,                            color: Colors.white),                      ),                    )                  ],                ),              )            ],          ),        ),      ),    );  }  Widget buildTextField(String labelText, String placeholder,      bool isPasswordTextField, TextEditingController controller) {    controller.value = TextEditingValue(text: placeholder);    return Padding(      padding: const EdgeInsets.only(bottom: 35.0),      child: TextField(        textInputAction: TextInputAction.next,        controller: controller,        obscureText: isPasswordTextField ? showPassword : false,        decoration: InputDecoration(            errorText:Globle.user_type==1? controller.text.isEmpty ? 'Field Can\'t Be Empty' : null:null,            suffixIcon: isPasswordTextField                ? IconButton(                    onPressed: () {                      setState(() {                        showPassword = !showPassword;                      });                    },                    icon: Icon(                      Icons.remove_red_eye,                      color: Colors.grey,                    ),                  )                : null,            contentPadding: EdgeInsets.only(bottom: 3),            labelText: labelText,            floatingLabelBehavior: FloatingLabelBehavior.always,            hintText: labelText,            hintStyle: TextStyle(              fontSize: 16,              fontWeight: FontWeight.bold,              color: Colors.black,            )),      ),    );  }  Random _rnd = Random();  void _showPicker(context) {    showModalBottomSheet(        context: context,        builder: (BuildContext bc) {          return SafeArea(            child: Container(              child: new Wrap(                children: <Widget>[                  new ListTile(                      leading: new Icon(Icons.photo_library),                      title: new Text('Photo Library'),                      onTap: () {                        _imgFromGallery();                        Navigator.of(context).pop();                      }),                  new ListTile(                    leading: new Icon(Icons.photo_camera),                    title: new Text('Camera'),                    onTap: () {                      _imgFromCamera();                      Navigator.of(context).pop();                    },                  ),                ],              ),            ),          );        });  }  PickedFile _image;  final picker = ImagePicker();  _imgFromCamera() async {    PickedFile image =    await picker.getImage(source: ImageSource.camera, imageQuality: 50);    setState(() {      _image = image;    });  }  _imgFromGallery() async {    // ignore: invalid_use_of_visible_for_testing_member    PickedFile image =    await picker.getImage(source: ImageSource.gallery, imageQuality: 50);    setState(() {      _image = image;    });  }  Future<Response> upload(File imageFile) async {    // open a bytestream    var stream =        new http.ByteStream(DelegatingStream.typed(imageFile.openRead()));    // get file length    var length = await imageFile.length();    // string to uri    var uri = Uri.parse(upload_image_url);    // create multipart request    var request = new http.MultipartRequest("POST", uri);    // multipart that takes file    var multipartFile = new http.MultipartFile('image', stream, length,        filename: basename(imageFile.path));    // add file to multipart    request.files.add(multipartFile);    // send    // var response = await request.send();    // print(response.statusCode);    http.Response response =        await http.Response.fromStream(await request.send());    // listen for response    // response.stream.transform(utf8.decoder).listen((value) {    //   print(value);    // });    return response;  }  void updateProfile(BuildContext context, String username, String name,      String password, String image, String user_id,String bio, ProgressDialog pr) async {    // SharedPreferences sharedPreferences = await SharedPreferences.getInstance();    Map data = {      'name': name,      'password': password,      'user_id': user_id,      'username': username,      'image': image,      'bio': bio,    };    var jsonResponse;    var response = await http.post(Uri.parse(update_profile), body: data);    if (response.statusCode == 200) {      jsonResponse = json.decode(response.body);      if (jsonResponse != null) {        print(jsonResponse.toString());        setState(() async {          pr.hide();          jsonResponse = json.decode(response.body);          print(jsonResponse);          if (jsonResponse["status"] == 400) {            Fluttertoast.showToast(                msg: jsonResponse['message'],                toastLength: Toast.LENGTH_SHORT,                gravity: ToastGravity.BOTTOM,                timeInSecForIosWeb: 1,                backgroundColor: Colors.red,                textColor: Colors.white,                fontSize: 16.0);          } else {            Globle.image=image;            Globle.name=name;            Globle.username=username;            Globle.password=password;            Globle.bio=bio;            SharedPreferences prefs = await SharedPreferences.getInstance();            prefs.clear();            prefs.setString('name',  Globle.name);            prefs.setString('username',  Globle.username);            prefs.setString('password', Globle.password);            prefs.setString('user_id', Globle.id);            prefs.setString('image', Globle.image);            prefs.setString('bio', Globle.bio);            Fluttertoast.showToast(                msg: "Account updated successfully",                toastLength: Toast.LENGTH_SHORT,                gravity: ToastGravity.BOTTOM,                timeInSecForIosWeb: 1,                backgroundColor: Colors.green,                textColor: Colors.white,                fontSize: 16.0);            if (Navigator.canPop(context)) {              Navigator.pop(context);            } else {              SystemNavigator.pop();            }          }        });      }    } else {      setState(() {        Fluttertoast.showToast(            msg: "Some thing went wrong",            toastLength: Toast.LENGTH_SHORT,            gravity: ToastGravity.CENTER,            timeInSecForIosWeb: 1,            backgroundColor: Colors.red,            textColor: Colors.white,            fontSize: 16.0);        pr.hide();      });      print(response.body);    }  }  String imagePath(String path){    var imagePath;    if(path.contains("http://") || path.contains("https://")){      imagePath=Globle.image;    }else{      imagePath="$mainUrl${Globle.image}";    }    return imagePath;  }}