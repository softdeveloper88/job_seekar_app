import 'dart:convert';import 'package:date_range_picker/date_range_picker.dart' as DateRagePicker;import 'package:filter_list/filter_list.dart';import 'package:flare_flutter/flare_actor.dart';import 'package:flare_flutter/flare_controls.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:fluttertoast/fluttertoast.dart';import 'package:font_awesome_flutter/font_awesome_flutter.dart';import 'package:http/http.dart' as http;import 'package:intl/intl.dart';import 'comments_screen.dart';import 'constants.dart';import 'custom_page_route.dart';import 'full_image_rout.dart';import 'globle.dart';import 'models/post.dart';class SearchScreen extends StatefulWidget {  SearchScreen({Key key, this.title}) : super(key: key);  //  // @override  // void initState() {  //   super.initState();  //    getPostData();  // }  final String title;  @override  _SearchScreenState createState() => _SearchScreenState();}class _SearchScreenState extends State<SearchScreen> {  bool asTabs = false;  String selectedValue;  String preselectedValue = "dolor sit";  List<int> selectedItems = [];  final List<DropdownMenuItem> items = [];  List<String> selectedCountList = [];  static const String appTitle = "Search Choices demo";  TextEditingController searchTextController = new TextEditingController();  final FlareControls flareControls = FlareControls();  Color _favIconColor = Colors.black;  // bool isPressed = 0;  bool _isLiked = false;  Future<List<Post>> postData;  // Get json result and convert it to model. Then add  // Future<Null> getPost() async {  //   final response = await http.get(url);  //   final responseJson = json.decode(response.body);  //  //   setState(() {  //     for (Map user in responseJson) {  //       _postData.add(Post.fromJson(user));  //     }  //   });  // }  @override  void initState() {    super.initState();    _postData.clear(); //removing previous data    getPostData(); //updating new data  }  @override  Widget build(BuildContext context) {    List<DateTime> picked = [];    String firstDate = "", lastDate = '';    return new Scaffold(      appBar: AppBar(          backgroundColor: Colors.white,          centerTitle: true,          automaticallyImplyLeading: false,          elevation: 1.0,          title: SizedBox(            child: new CupertinoSearchTextField(              // autocorrect: true,              controller: searchTextController,              // decoration: new InputDecoration(              //     // enabledBorder: OutlineInputBorder(              //     //   borderRadius: BorderRadius.all(Radius.circular(12.0)),              //     //   borderSide: BorderSide(color: Colors.green, width: 2),              //     // ),              //     // focusedBorder: OutlineInputBorder(              //     //   borderRadius: BorderRadius.all(Radius.circular(10.0)),              //     //   borderSide: BorderSide(color: Colors.green, width: 2),              //     // ),              //     // prefix:new Icon(Icons.search),              //     suffix: GestureDetector(              //         onTap: () {              //           searchTextController.clear();              //           onSearchTextChanged('');              //         },              //         child: Icon(Icons.cancel)),              //     hintText: 'Search by city, title',              //     border: InputBorder.none),              onChanged: onSearchTextChanged,            ),          )),      body: new Column(        children: <Widget>[          Container(            // color: Colors.grey,            decoration: BoxDecoration(              color: Colors.white,              border: Border(                bottom: BorderSide(color: Colors.grey, width: 1),              ),            ),            child: SingleChildScrollView(                scrollDirection: Axis.horizontal,                padding: EdgeInsets.fromLTRB(10.0, 0.0, 10.0, 0.0),                child: Row(                  children: [                    Padding(                      padding: const EdgeInsets.all(8.0),                      child: GestureDetector(                        onTap: () async {                          picked = await DateRagePicker.showDatePicker(                              context: context,                              initialFirstDate: new DateTime.now(),                              initialLastDate: (new DateTime.now())                                  .add(new Duration(days: 7)),                              firstDate: new DateTime(2015),                              lastDate: new DateTime(2030));                          if (picked != null && picked.length == 2) {                            print(picked.first);                            firstDate = picked.first.toString();                            lastDate = picked.last.toString();                            setState(() {                              onSearchDateChange(picked.first.toString(),                                  picked.last.toString());                            });                          }                        },                        child: new Container(                          height: 30,                          width: MediaQuery.of(context).size.width / 3,                          decoration: BoxDecoration(                            color: Colors.white,                            border: Border.all(                              color: Colors.black,                              width: 1,                            ),                            borderRadius: BorderRadius.circular(8),                          ),                          child: Center(child: Text("Sort by Date")),                        ),                      ),                    ),                    GestureDetector(                      onTap: () {                        createDialogCategory(context);                      },                      child: new Container(                        height: 30,                        width: MediaQuery.of(context).size.width / 3,                        decoration: BoxDecoration(                          color: Colors.white,                          border: Border.all(                            color: Colors.black,                            width: 1,                          ),                          borderRadius: BorderRadius.circular(8),                        ),                        child: Center(child: Text("Sorted by Category")),                      ),                    ),                    SizedBox(                      width: 6,                    ),                    GestureDetector(                      onTap: () {                        createDialog(context);                        // _openFilterDialog();                        // createDialog(context);                      },                      child: new Container(                        height: 30,                        width: MediaQuery.of(context).size.width / 3,                        decoration: BoxDecoration(                          color: Colors.white,                          border: Border.all(                            color: Colors.black,                            width: 1,                          ),                          borderRadius: BorderRadius.circular(8),                        ),                        child: Center(child: Text("Sorted by city")),                      ),                    ),                  ],                )),          ),          new Expanded(              child: _searchResult.length != 0                  ? new ListView.builder(                      itemCount: _searchResult.length,                      itemBuilder: (context, i) {                        int isPressed = _searchResult[i].like;                        int isSaved = _searchResult[i].save;                        return new Column(                          mainAxisAlignment: MainAxisAlignment.start,                          mainAxisSize: MainAxisSize.min,                          crossAxisAlignment: CrossAxisAlignment.stretch,                          children: <Widget>[                            Padding(                              padding: const EdgeInsets.fromLTRB(                                  16.0, 16.0, 8.0, 16.0),                              child: Row(                                mainAxisAlignment:                                    MainAxisAlignment.spaceBetween,                                children: <Widget>[                                  Row(                                    children: <Widget>[                                      new Container(                                        height: 40.0,                                        width: 40.0,                                        decoration: new BoxDecoration(                                          border: Border.all(),                                          shape: BoxShape.circle,                                          image: new DecorationImage(                                            fit: BoxFit.cover,                                            image: ExactAssetImage('assets/paper.png'),),                                        ),                                      ),                                      new SizedBox(                                        width: 10.0,                                      ),                                      Column(                                        crossAxisAlignment:                                            CrossAxisAlignment.start,                                        children: [                                          new Text(                                            "Paperjob.pk",                                            // _searchResult[i].title,                                            style: TextStyle(                                                fontWeight: FontWeight.bold),                                          ),                                          Row(                                            mainAxisAlignment: MainAxisAlignment.center,                                            children: [                                              Text(_searchResult[i].category),                                            ],                                          ),                                          Row(                                            mainAxisAlignment:                                                MainAxisAlignment.center,                                            children: [                                              Text(_searchResult[i].city),                                            ],                                          )                                        ],                                      )                                    ],                                  ),                                  new IconButton(                                    icon: Icon(Icons.more_vert),                                    onPressed: null,                                  )                                ],                              ),                            ),                            Column(                              mainAxisAlignment: MainAxisAlignment.center,                              children: <Widget>[                                GestureDetector(                                  onTap: (){                                    Navigator.push(context, CustomPageRoute( FullImagePageRoute( "$mainUrl${_searchResult[i].image}")));                                  },                                  onDoubleTap: () {                                    setState(() {                                      if (isPressed != 1) {                                        setState(() {                                          isPressed = 1;                                          _searchResult[i].like = 1;                                        });                                        likes(Globle.id, _searchResult[i].id, "1");                                        //     .then((res) {                                        //   if (res.statusCode == 200) {                                        //     isPressed = !isPressed;                                        //   } else {                                        //     isPressed = !isPressed;                                        //   }                                        // });                                        // saveLikeValue(_isLiked);                                        // postLike(widget.documentSnapshot.reference);                                      } else {                                        setState(() {                                          isPressed = 0;                                          _searchResult[i].like = 0;                                        });                                        likes(Globle.id, _searchResult[i].id, "0");                                        //     .then((res) {                                        //   if (res.statusCode == 200) {                                        //     isPressed = !isPressed;                                        //                                        //   } else {                                        //     isPressed = !isPressed;                                        //   }                                        // });                                        //saveLikeValue(_isLiked);                                        // postUnlike(widget.documentSnapshot.reference);                                      }                                      // isPressed = !isPressed;                                    });                                    flareControls.play("like");                                  },                                  child: Stack(                                    children: <Widget>[                                      Container(                                        width: double.infinity,                                        height: 250,                                        child: new Image.network(                                          // "https://image.shutterstock.com/shutterstock/photos/143467093/display_1500/stock-photo-search-job-newspaper-with-advertisments-glasses-and-mobile-d-143467093.jpg",                                          "$mainUrl${_searchResult[i].image}",                                          fit: BoxFit.fill,                                        ),                                      ),                                      Container(                                        width: double.infinity,                                        height: 250,                                        child: Center(                                          child: SizedBox(                                            width: 80,                                            height: 80,                                            child: FlareActor(                                              'assets/instagram_like.flr',                                              controller: flareControls,                                              animation: 'idle',                                            ),                                          ),                                        ),                                      ),                                    ],                                  ),                                ),                                Row(                                  children: <Widget>[                                    Expanded(                                      child: Row(                                        children: <Widget>[                                          IconButton(                                            icon: new Icon(isPressed == 1                                                ? Icons.favorite                                                : FontAwesomeIcons.heart),                                            color: isPressed == 1                                                ? Colors.red                                                : Colors.black,                                            onPressed: () {                                              if (isPressed != 1) {                                                setState(() {                                                  isPressed = 1;                                                  _searchResult[i].like = 1;                                                });                                                likes(Globle.id,                                                    _searchResult[i].id, "1");                                                //     .then((res) {                                                //   if (res.statusCode == 200) {                                                //     isPressed = !isPressed;                                                //   } else {                                                //     isPressed = !isPressed;                                                //   }                                                // });                                                // saveLikeValue(_isLiked);                                                // postLike(widget.documentSnapshot.reference);                                              } else {                                                setState(() {                                                  isPressed = 0;                                                  _searchResult[i].like = 0;                                                });                                                likes(Globle.id,                                                    _searchResult[i].id, "0");                                                //     .then((res) {                                                //   if (res.statusCode == 200) {                                                //     isPressed = !isPressed;                                                //                                                //   } else {                                                //     isPressed = !isPressed;                                                //   }                                                // });                                                //saveLikeValue(_isLiked);                                                // postUnlike(widget.documentSnapshot.reference);                                              }                                            },                                          ),                                          IconButton(                                              icon: Icon(FontAwesomeIcons.comment),                                              onPressed: () {                                                Navigator.push(                                                    context,                                                    CustomPageRoute(                                                        new CommentsScreen(                                                            post_id:                                                                _searchResult[i]                                                                    .id)));                                              })                                        ],                                      ),                                    ),                                    IconButton(                                      icon: Icon(isSaved == 1                                          ? Icons.bookmark                                          : FontAwesomeIcons.bookmark),                                      color: isSaved == 1                                          ? Colors.red                                          : Colors.black,                                      onPressed: () {                                        if (isSaved != 1) {                                          setState(() {                                            isSaved = 1;                                            _searchResult[i].save = 1;                                          });                                          save(Globle.id, _searchResult[i].id, "1");                                          //     .then((res) {                                          //   if (res.statusCode == 200) {                                          //     isPressed = !isPressed;                                          //   } else {                                          //     isPressed = !isPressed;                                          //   }                                          // });                                          // saveLikeValue(_isLiked);                                          // postLike(widget.documentSnapshot.reference);                                        } else {                                          setState(() {                                            isSaved = 0;                                            _searchResult[i].save = 0;                                          });                                          save(Globle.id, _searchResult[i].id, "0");                                          //     .then((res) {                                          //   if (res.statusCode == 200) {                                          //     isPressed = !isPressed;                                          //                                          //   } else {                                          //     isPressed = !isPressed;                                          //   }                                          // });                                          //saveLikeValue(_isLiked);                                          // postUnlike(widget.documentSnapshot.reference);                                        }                                      },                                    )                                  ],                                )                              ],                            ),                            Padding(                              padding:                              const EdgeInsets.symmetric(horizontal: 8.0),                              child: Text(                                "Liked by  ${_searchResult[i].count_like} peoples",                                style: TextStyle(fontWeight: FontWeight.bold),                              ),                            ),                            Padding(                              padding: const EdgeInsets.only(top: 8.0, left: 8.0),                              child: Row(                                mainAxisAlignment: MainAxisAlignment.spaceBetween,                                children: [                                  Flexible(                                      child: Text(                                        _searchResult[i].title,                                        style: TextStyle(fontWeight: FontWeight.bold),                                      )),                                  Padding(                                    padding: const EdgeInsets.only(right:8.0),                                    child: new Container(                                      height: 20,                                      width: MediaQuery.of(context).size.width / 4,                                      decoration: BoxDecoration(                                        color: Colors.white,                                        border: Border.all(                                          color: Colors.black,                                          width: 1,                                        ),                                        borderRadius: BorderRadius.circular(8),                                      ),                                      child: Center(child: Text(_searchResult[i].sub_category,style: TextStyle(fontSize: 12),)),                                    ),                                  ),                                ],                              ),                            ),                            Padding(                              padding: const EdgeInsets.all(8.0),                              child: Row(                                children: [                                  Flexible(child: Text(_searchResult[i].description))                                ],                              ),                            ),                            Padding(                              padding: const EdgeInsets.only(left:8.0),                              child: Row(                                children: [                                  Flexible(child: Text(timeConvert(_searchResult[i].timestamp)))                                ],                              ),                            ),                            Padding(                              padding:                              const EdgeInsets.fromLTRB(8.0, 8.0, 0.0, 8.0),                              child: Row(                                mainAxisAlignment: MainAxisAlignment.start,                                children: <Widget>[                                  new Container(                                    height: 30.0,                                    width: 30.0,                                    decoration: new BoxDecoration(                                      shape: BoxShape.circle,                                      image: new DecorationImage(                                          fit: BoxFit.fill,                                          image: new NetworkImage(                                            imagePath(Globle.image),                                          )),                                    ),                                  ),                                  new SizedBox(                                    width: 10.0,                                  ),                                  Expanded(                                    child: new TextField(                                      decoration: new InputDecoration(                                        border: InputBorder.none,                                        hintText: "Add a comment...",                                      ),                                    ),                                  ),                                ],                              ),                            ),                          ],                        );                        // return new Card(                        //   child: new ListTile(                        //     leading: new CircleAvatar(                        //       backgroundImage: new NetworkImage(                        //         _searchResult[i].profileUrl,                        //       ),                        //     ),                        //     title: new Text(_searchResult[i].title +                        //         ' ' +                        //         _searchResult[i].lastName),                        //   ),                        // );                      },                    )                  : Center(                      child: Text("Search Job by date and key words"),                    )              // : new ListView.builder(              //     itemCount: _postData.length,              //     itemBuilder: (context, i) {              //       int isPressed = _postData[i].like;              //       int isSaved = _postData[i].save;              //       return new Column(              //         mainAxisAlignment: MainAxisAlignment.start,              //         mainAxisSize: MainAxisSize.min,              //         crossAxisAlignment: CrossAxisAlignment.stretch,              //         children: <Widget>[              //           Padding(              //             padding: const EdgeInsets.fromLTRB(              //                 16.0, 16.0, 8.0, 16.0),              //             child: Row(              //               mainAxisAlignment: MainAxisAlignment.spaceBetween,              //               children: <Widget>[              //                 Row(              //                   children: <Widget>[              //                     new Container(              //                       height: 40.0,              //                       width: 40.0,              //                       decoration: new BoxDecoration(              //                         shape: BoxShape.circle,              //                         image: new DecorationImage(              //                             fit: BoxFit.cover,              //                             image: new NetworkImage(              //                                 "$mainUrl${_postData[i].image}")),              //                       ),              //                     ),              //                     new SizedBox(              //                       width: 10.0,              //                     ),              //                     Column(              //                       crossAxisAlignment:              //                           CrossAxisAlignment.start,              //                       children: [              //                         new Text(              //                           _postData[i].title,              //                           style: TextStyle(              //                               fontWeight: FontWeight.bold),              //                         ),              //                         Row(              //                           mainAxisAlignment:              //                               MainAxisAlignment.center,              //                           children: [              //                             Icon(Icons.location_city),              //                             Text(_postData[i].city),              //                           ],              //                         )              //                       ],              //                     )              //                   ],              //                 ),              //                 new IconButton(              //                   icon: Icon(Icons.more_vert),              //                   onPressed: null,              //                 )              //               ],              //             ),              //           ),              //           Column(              //             mainAxisAlignment: MainAxisAlignment.center,              //             children: <Widget>[              //               GestureDetector(              //                 onDoubleTap: () {              //                   setState(() {              //                     if (isPressed != 1) {              //                       setState(() {              //                         isPressed = 1;              //                         _postData[i].like = 1;              //                       });              //                       likes(Globle.id, _postData[i].id, "1");              //                       //     .then((res) {              //                       //   if (res.statusCode == 200) {              //                       //     isPressed = !isPressed;              //                       //   } else {              //                       //     isPressed = !isPressed;              //                       //   }              //                       // });              //                       // saveLikeValue(_isLiked);              //                       // postLike(widget.documentSnapshot.reference);              //                     } else {              //                       setState(() {              //                         isPressed = 0;              //                         _postData[i].like = 0;              //                       });              //              //                       likes(Globle.id, _postData[i].id, "0");              //                       //     .then((res) {              //                       //   if (res.statusCode == 200) {              //                       //     isPressed = !isPressed;              //                       //              //                       //   } else {              //                       //     isPressed = !isPressed;              //                       //   }              //                       // });              //                       //saveLikeValue(_isLiked);              //                       // postUnlike(widget.documentSnapshot.reference);              //                     }              //                     // isPressed = !isPressed;              //                   });              //                   flareControls.play("like");              //                 },              //                 child: Stack(              //                   children: <Widget>[              //                     Container(              //                       width: double.infinity,              //                       height: 250,              //                       child: new Image.network(              //                         // "https://image.shutterstock.com/shutterstock/photos/143467093/display_1500/stock-photo-search-job-newspaper-with-advertisments-glasses-and-mobile-d-143467093.jpg",              //                         "$mainUrl${_postData[i].image}",              //                         fit: BoxFit.cover,              //                       ),              //                     ),              //                     Container(              //                       width: double.infinity,              //                       height: 250,              //                       child: Center(              //                         child: SizedBox(              //                           width: 80,              //                           height: 80,              //                           child: FlareActor(              //                             'assets/instagram_like.flr',              //                             controller: flareControls,              //                             animation: 'idle',              //                           ),              //                         ),              //                       ),              //                     ),              //                   ],              //                 ),              //               ),              //               Row(              //                 children: <Widget>[              //                   Expanded(              //                     child: Row(              //                       children: <Widget>[              //                         IconButton(              //                           iconSize: 30,              //                           icon: new Icon(isPressed == 1              //                               ? Icons.favorite              //                               : FontAwesomeIcons.heart),              //                           color: isPressed == 1              //                               ? Colors.red              //                               : Colors.black,              //                           onPressed: () {              //                             if (isPressed != 1) {              //                               setState(() {              //                                 isPressed = 1;              //                                 _postData[i].like = 1;              //                               });              //                               likes(Globle.id, _postData[i].id,              //                                   "1");              //                               //     .then((res) {              //                               //   if (res.statusCode == 200) {              //                               //     isPressed = !isPressed;              //                               //   } else {              //                               //     isPressed = !isPressed;              //                               //   }              //                               // });              //                               // saveLikeValue(_isLiked);              //                               // postLike(widget.documentSnapshot.reference);              //                             } else {              //                               setState(() {              //                                 isPressed = 0;              //                                 _postData[i].like = 0;              //                               });              //              //                               likes(Globle.id, _postData[i].id,              //                                   "0");              //                               //     .then((res) {              //                               //   if (res.statusCode == 200) {              //                               //     isPressed = !isPressed;              //                               //              //                               //   } else {              //                               //     isPressed = !isPressed;              //                               //   }              //                               // });              //                               //saveLikeValue(_isLiked);              //                               // postUnlike(widget.documentSnapshot.reference);              //                             }              //                           },              //                         ),              //                         IconButton(              //                             iconSize: 30,              //                             icon: Icon(Icons.comment),              //                             onPressed: () {              //                               Navigator.push(              //                                   context,              //                                   CustomPageRoute(              //                                       new CommentsScreen(              //                                           post_id: _postData[i]              //                                               .id)));              //                             })              //                       ],              //                     ),              //                   ),              //                   IconButton(              //                     iconSize: 30,              //                     icon: Icon(isSaved == 1              //                         ? Icons.bookmark              //                         : FontAwesomeIcons.bookmark),              //                     color: isSaved == 1              //                         ? Colors.red              //                         : Colors.black,              //                     onPressed: () {              //                       if (isSaved != 1) {              //                         setState(() {              //                           isSaved = 1;              //                           _postData[i].save = 1;              //                         });              //                         save(Globle.id, _postData[i].id, "1");              //                         //     .then((res) {              //                         //   if (res.statusCode == 200) {              //                         //     isPressed = !isPressed;              //                         //   } else {              //                         //     isPressed = !isPressed;              //                         //   }              //                         // });              //                         // saveLikeValue(_isLiked);              //                         // postLike(widget.documentSnapshot.reference);              //                       } else {              //                         setState(() {              //                           isSaved = 0;              //                           _postData[i].save = 0;              //                         });              //              //                         save(Globle.id, _postData[i].id, "0");              //                         //     .then((res) {              //                         //   if (res.statusCode == 200) {              //                         //     isPressed = !isPressed;              //                         //              //                         //   } else {              //                         //     isPressed = !isPressed;              //                         //   }              //                         // });              //                         //saveLikeValue(_isLiked);              //                         // postUnlike(widget.documentSnapshot.reference);              //                       }              //                     },              //                   )              //                 ],              //               )              //             ],              //           ),              //           Padding(              //             padding:              //                 const EdgeInsets.symmetric(horizontal: 16.0),              //             child: Text(              //               "Liked by  ${_postData[i].count_like} peoples",              //               style: TextStyle(fontWeight: FontWeight.bold),              //             ),              //           ),              //           Padding(              //             padding:              //                 const EdgeInsets.fromLTRB(16.0, 16.0, 0.0, 8.0),              //             child: Row(              //               mainAxisAlignment: MainAxisAlignment.start,              //               children: <Widget>[              //                 new Container(              //                   height: 40.0,              //                   width: 40.0,              //                   decoration: new BoxDecoration(              //                     shape: BoxShape.circle,              //                     image: new DecorationImage(              //                         fit: BoxFit.fill,              //                         image: new NetworkImage(              //                           imagePath(Globle.image),              //                         )),              //                   ),              //                 ),              //                 new SizedBox(              //                   width: 10.0,              //                 ),              //                 Expanded(              //                   child: new TextField(              //                     decoration: new InputDecoration(              //                       border: InputBorder.none,              //                       hintText: "Add a comment...",              //                     ),              //                   ),              //                 ),              //               ],              //             ),              //           ),              //         ],              //       );              //     },              //   ),              ),        ],      ),    );  }  onSearchTextChanged(String text) async {    _searchResult.clear();    if (text.isEmpty) {      setState(() {});      return;    }    _postData.forEach((postData) {      if (postData.city.toLowerCase().contains(text) || postData.category.toLowerCase().contains(text) ||postData.title.toLowerCase().contains(text))        _searchResult.add(postData);    });    setState(() {    });  }  onSearchByCity(String text) async {    _searchResult.clear();    if (text.isEmpty) {      setState(() {});      return null;    }    print(text);     _postData.forEach((postData) {      if (postData.city.toLowerCase().contains(text.toLowerCase())) {        _searchResult.add(postData);        print("city" + postData.city);      }    });     setState(() {     });    // if (_postData.any((element) =>    //     element.city.toLowerCase().contains("Islamabad"))) {    //   /// return list which contains matches    //   return _postData    //       .where((element) =>    //       element.city.toLowerCase().contains(text.toLowerCase()))    //       .toList();    // }    // else{    //   return [];    // }    // return _searchResult;  }  onSearchByCategory(String text) async {    _searchResult.clear();    if (text.isEmpty) {      setState(() {});      return null;    }    print(text);    _postData.forEach((postData) {      if (postData.category.toLowerCase().contains(text.toLowerCase())) {        _searchResult.add(postData);        print("category" + postData.category);      }    });    setState(() {    });    // if (_postData.any((element) =>    //     element.city.toLowerCase().contains("Islamabad"))) {    //   /// return list which contains matches    //   return _postData    //       .where((element) =>    //       element.city.toLowerCase().contains(text.toLowerCase()))    //       .toList();    // }    // else{    //   return [];    // }    // return _searchResult;  }  void _openFilterDialog() async {    await FilterListDialog.display<Post>(        context,        listData: _postData1,        // selectedListData: _postData1,        height: 480,        headlineText: "Select Category",        searchFieldHintText: "Search Here",        choiceChipLabel: (item) {          return item.category;        },        validateSelectedItem: (list, val) {          return list.contains(val);        },        onItemSearch: (list, text) {          if (list.any((element) =>              element.category.toLowerCase().contains(text.toLowerCase()))) {            return list                .where((element) =>                element.category.toLowerCase().contains(text.toLowerCase()))                .toList();          }          else{            return [];          }        },        onApplyButtonClick: (list) {          setState(() {            if (list != null) {              setState(() {                print(_searchResult.length);                _searchResult = List.from(list);              });            }            Navigator.pop(context);          });         });  }  onSearchDateChange(String firstDate, String lastDate) async {    String first = firstDate;    String last = lastDate;    _searchResult.clear();    if (firstDate.isEmpty) {      setState(() {});      return;    }    if (lastDate.isEmpty) {      setState(() {});      return;    }    print(firstDate);    _postData.forEach((postData) {      DateTime firstDate = DateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse(first);      DateTime lastDate = DateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse(last);      final DateFormat formatter = DateFormat('yyyy-MM-dd');      final String firstDated = formatter.format(firstDate);      final String lastDated = formatter.format(lastDate);      DateTime databaseDate =      DateFormat("yyyy-MM-dd hh:mm a").parse(postData.timestamp);      final DateFormat databaseDated = DateFormat('yyyy-MM-dd');      final String databaseDateString = databaseDated.format(databaseDate);      DateTime dateTime1 = DateFormat('yyyy-MM-dd').parse(firstDated);      DateTime dateTime2 = DateFormat('yyyy-MM-dd').parse(lastDated);      DateTime databaseDate1 =          DateFormat('yyyy-MM-dd').parse(databaseDateString);      print("formateDate1$firstDated");      print("formateDate2${databaseDateString}");      if (databaseDate1.isAfter(dateTime1) &&          databaseDate1.isBefore(dateTime2) || (databaseDate1.isAtSameMomentAs(dateTime1) || databaseDate1.isAtSameMomentAs(dateTime2))) {        print("condition true${postData.timestamp}");        _searchResult.add(postData);      }    });    setState(() {});  }  createDialog(BuildContext context1) {    // print("ddddd");    // fetchCities().then((response) {    List<String> city = ["Islamabad", "Peshawar", "Lahore", "Karachi", "Quetta"];    showDialog(        context: context1,        builder: (BuildContext dialogContext) {          return AlertDialog(            title: Text('Sorted by City'),            content: Column(              mainAxisSize: MainAxisSize.min,              children: [                Container(                  height: 200.0,                  width: 400.0,                  child: ListView.builder(                    shrinkWrap: true,                    itemCount: city.length,                    itemBuilder: (BuildContext context, int index) {                      return ListTile(                          title: Text(city[index]),                          onTap: () {                            setState(() {                              print(city[index]);                              onSearchByCity(city[index]);                              });                              Navigator.of(dialogContext).pop();                            });                            // Navigator.of(context, rootNavigator: true).pop();                    },                  ),                ),              ],            ),          );          // }          // );        });  }  createDialogCategory(BuildContext context1) {    print("ddddd");    // fetchCities().then((response) {    List<String> category = ["Software Engineering", "Computer Science", "Civil Engineering", "Electrical Engineering", "Electronic Engineering"];    showDialog(        context: context1,        builder: (BuildContext dialogContext) {          return AlertDialog(            title: Text('Sorted by City'),            content: Column(              mainAxisSize: MainAxisSize.min,              children: [                Container(                  height: 200.0,                  width: 400.0,                  child: ListView.builder(                    shrinkWrap: true,                    itemCount: category.length,                    itemBuilder: (BuildContext context, int index) {                      return ListTile(                          title: Text(category[index]),                          onTap: () {                            setState(() {                              print(category[index]);                              onSearchByCategory(category[index]);                            });                            Navigator.of(dialogContext).pop();                          });                      // Navigator.of(context, rootNavigator: true).pop();                    },                  ),                ),              ],            ),          );          // }          // );        });  }}List<Post> _searchResult = [];List<Post> _postData = [];List<Post> _postData1 = [];Future<List<Post>> getPostData() async {  var jsonResponse;  var response = await http.get(Uri.parse(post_url + "?user_id=${Globle.id}"));  if (response.statusCode == 200) {    jsonResponse = json.decode(response.body);    print(jsonResponse);    List data = jsonResponse["data"] as List;    // widget.postData= data.map<Post>((json) => Post.fromJson(json)).toList();    _postData = data.map<Post>((json) => Post.fromJson(json)).toList();    _postData1 = data.map<Post>((json) => Post.fromJson(json)).toList();    final ids = _postData1.map((e) => e.city).toSet();    _postData1.retainWhere((x) => ids.remove(x.category));    // if (.name.toLowerCase().contains(searchQuery) ||    //     country.name.contains(searchQuery)) {    //   filteredRecored.add(country);    // }    // return postData;    // print(_list.toString());    // return list;  } else {    Fluttertoast.showToast(        msg: "some thing went wrong",        toastLength: Toast.LENGTH_SHORT,        gravity: ToastGravity.CENTER,        timeInSecForIosWeb: 1,        backgroundColor: Colors.red,        textColor: Colors.white,        fontSize: 16.0);  }//  radio button}Future<http.Response> likes(    String user_id, String post_id, String like_status) async {  // SharedPreferences sharedPreferences = await SharedPreferences.getInstance();  Map data = {    'user_id': user_id,    'post_id': post_id,    'like_status': like_status,  };  return await http.post(Uri.parse(set_like), body: data);}Future<http.Response> save(    String user_id, String post_id, String like_status) async {  // SharedPreferences sharedPreferences = await SharedPreferences.getInstance();  Map data = {    'user_id': user_id,    'post_id': post_id,    'save_status': like_status,  };  return await http.post(Uri.parse(save_post), body: data);}String imagePath(String path) {  print(path);  var imagePath;  if (path.contains("http://") || path.contains("https://")) {    imagePath = Globle.image;  } else {    imagePath = "$mainUrl${Globle.image}";  }  return imagePath;}String timeConvert(String time){  DateTime databaseDate =DateFormat("yyyy-MM-dd hh:mm a").parse(time);  final DateFormat databaseDated = DateFormat('EEE, dd MMM yyyy hh:mm a');  return databaseDated.format(databaseDate);}